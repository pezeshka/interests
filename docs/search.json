[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "armed_conflict.html",
    "href": "armed_conflict.html",
    "title": "Analysis of Penguin Data",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(httr)\nlibrary(jsonlite)\n\n\nAttaching package: 'jsonlite'\n\nThe following object is masked from 'package:purrr':\n\n    flatten\n\nlibrary(plotly)\n\n\nAttaching package: 'plotly'\n\nThe following object is masked from 'package:httr':\n\n    config\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\nThe following object is masked from 'package:stats':\n\n    filter\n\nThe following object is masked from 'package:graphics':\n\n    layout"
  },
  {
    "objectID": "armed_conflict.html#access-ucdp-datasets-via-api",
    "href": "armed_conflict.html#access-ucdp-datasets-via-api",
    "title": "Analysis of Penguin Data",
    "section": "Access UCDP Datasets via API",
    "text": "Access UCDP Datasets via API\n\nget_prio_data &lt;- function() {\n  base_url &lt;- \"https://ucdpapi.pcr.uu.se/api/ucdpprioconflict/25.1?pagesize=1000\"\n  all_data &lt;- list()\n  page &lt;- 1\n\n  while (TRUE) {\n    url &lt;- paste0(base_url, \"&page=\", page)\n    response &lt;- GET(url)\n    if (status_code(response) != 200) {\n      stop(\"Failed to fetch data from UCDP API\")\n    }\n    data &lt;- fromJSON(content(response, \"text\", encoding = \"UTF-8\"))\n    if (length(data$Result) == 0) {\n      break\n    }\n    all_data &lt;- c(all_data, list(data$Result))\n    page &lt;- page + 1\n  }\n  bind_rows(all_data)\n}\n\n# Fetch and process the data\ndf_prio &lt;- get_prio_data()"
  },
  {
    "objectID": "armed_conflict.html#number-of-armed-conflict-by-conflict-type",
    "href": "armed_conflict.html#number-of-armed-conflict-by-conflict-type",
    "title": "Analysis of Penguin Data",
    "section": "Number of Armed Conflict by Conflict Type",
    "text": "Number of Armed Conflict by Conflict Type\n\nplot_1 &lt;- df_prio |&gt; \n  group_by(year, type_of_conflict) |&gt; \n  summarize(count = n(), \n            .groups = \"drop\") |&gt; \n  mutate(year = as.numeric(year)) |&gt; \n  ggplot(aes(x = year, \n             y = count, \n             color = type_of_conflict, \n             fill = type_of_conflict)) +\n  geom_area()\n\ndf_prio |&gt; \n  group_by(year, type_of_conflict) |&gt; \n  summarize(count = n(), \n            .groups = \"drop\") |&gt; \n  mutate(year = as.numeric(year)) |&gt; \n  plot_ly(\n    x = ~year,\n    y = ~count,\n    color = ~type_of_conflict, # Creates a trace for each type and assigns color\n    type = 'scatter',\n    mode = 'lines',\n    stackgroup = 'one'         # This is the key to creating a stacked area chart\n  ) |&gt; \n  layout(\n    title = 'Conflict Count by Type Over Time (Native Plotly)',\n    xaxis = list(title = 'Year'),\n    yaxis = list(title = 'Count')\n  )\n\n\n\n\nplotly::ggplotly(plot_1)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "interests",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  }
]