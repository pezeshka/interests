[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "armed_conflict.html",
    "href": "armed_conflict.html",
    "title": "Armed Conflicts",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(httr)\nlibrary(jsonlite)\n\n\nAttaching package: 'jsonlite'\n\nThe following object is masked from 'package:purrr':\n\n    flatten\n\nlibrary(plotly)\n\n\nAttaching package: 'plotly'\n\nThe following object is masked from 'package:httr':\n\n    config\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\nThe following object is masked from 'package:stats':\n\n    filter\n\nThe following object is masked from 'package:graphics':\n\n    layout"
  },
  {
    "objectID": "armed_conflict.html#access-ucdp-datasets-via-api",
    "href": "armed_conflict.html#access-ucdp-datasets-via-api",
    "title": "Armed Conflicts",
    "section": "Access UCDP Datasets via API",
    "text": "Access UCDP Datasets via API\n\nget_prio_data &lt;- function() {\n  base_url &lt;- \"https://ucdpapi.pcr.uu.se/api/ucdpprioconflict/25.1?pagesize=1000\"\n  all_data &lt;- list()\n  page &lt;- 1\n\n  while (TRUE) {\n    url &lt;- paste0(base_url, \"&page=\", page)\n    response &lt;- GET(url)\n    if (status_code(response) != 200) {\n      stop(\"Failed to fetch data from UCDP API\")\n    }\n    data &lt;- fromJSON(content(response, \"text\", encoding = \"UTF-8\"))\n    if (length(data$Result) == 0) {\n      break\n    }\n    all_data &lt;- c(all_data, list(data$Result))\n    page &lt;- page + 1\n  }\n  bind_rows(all_data)\n}\n\n# Fetch and process the data\ndf_prio &lt;- get_prio_data()"
  },
  {
    "objectID": "armed_conflict.html#number-of-armed-conflict-by-conflict-type",
    "href": "armed_conflict.html#number-of-armed-conflict-by-conflict-type",
    "title": "Armed Conflicts",
    "section": "Number of Armed Conflict by Conflict Type",
    "text": "Number of Armed Conflict by Conflict Type\nUsing the UCDP PRIO Armed Conflict Dataset, the below plot shows the number of armed conflicts over time.\n\ndf_prio |&gt; \n  group_by(year, type_of_conflict) |&gt; \n  summarize(count = n(), \n            .groups = \"drop\") |&gt; \n  mutate(year = as.numeric(year), \n         type_of_conflict = case_when(\n           type_of_conflict==1 ~ \"Extrasystemic\", \n           type_of_conflict==2 ~ \"Interstate\", \n           type_of_conflict==3 ~ \"Intrastate\", \n           type_of_conflict==4 ~ \"Int'l Intrastate\", \n           TRUE ~ NA\n         )) |&gt; \n  plot_ly(\n    x = ~year,\n    y = ~count,\n    color = ~type_of_conflict, # Creates a trace for each type and assigns color\n    type = 'scatter',\n    mode = 'lines',\n    stackgroup = 'one'         # This is the key to creating a stacked area chart\n  ) |&gt; \n  layout(\n    title = 'Conflict Count by Type Over Time (Native Plotly)',\n    xaxis = list(title = 'Year'),\n    yaxis = list(title = 'Count')\n  )"
  },
  {
    "objectID": "mass.html",
    "href": "mass.html",
    "title": "Massachusetts",
    "section": "",
    "text": "show code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nshow code\nlibrary(readxl)\nlibrary(plotly)\n\n\n\nAttaching package: 'plotly'\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\nThe following object is masked from 'package:stats':\n\n    filter\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\n\nshow code\nlibrary(httr)\n\n\n\nAttaching package: 'httr'\n\nThe following object is masked from 'package:plotly':\n\n    config\n\n\nshow code\nlibrary(jsonlite)\n\n\n\nAttaching package: 'jsonlite'\n\nThe following object is masked from 'package:purrr':\n\n    flatten\n\n\nshow code\nlibrary(crosstalk)"
  },
  {
    "objectID": "mass.html#summary",
    "href": "mass.html#summary",
    "title": "Massachusetts",
    "section": "Summary",
    "text": "Summary\nIf you spend enough time with homeowners, you’re likely to hear them gripe about property taxes. And as you’d expect, the volume of griping increases with an increase in the amount of property taxes paid.\nBut even if you’re not a homeowner, property taxes are a big deal. If you’re homeshopping, along with principal, interest, and private mortgage insurance, it’s one of the four biggest line items in your estimated mortgage payment. Perhaps more importantly, as a resident of whatever municipality, property taxes are often the largest contributor of revenue.\nIn an effort to aid research and public conversation, I wanted to build a useable tool for folks to look at property tax rates across time and space. The interactive tables and graphics aim to do just that.\nData for property tax rate for Massachusetts municipalities can be found here."
  },
  {
    "objectID": "mass.html#but-what-are-property-taxes",
    "href": "mass.html#but-what-are-property-taxes",
    "title": "Massachusetts",
    "section": "But What are property taxes?",
    "text": "But What are property taxes?\nProperty taxes are tied to the value of a home and are paid by the homeowner. In Massachusetts, The total amount paid is a function of the assessed value of a home and the property tax rate. It’s important to note that the assessed value of a home is not the same as the cost of the home. For example, in California, property taxes are largely a function of the purchasing price and rate. But in Massachusetts, the purchasing price of a home and its assessed value are distinct with the assessed value often being lower than the purchasing price.\n\n\nshow code\ntax_prop &lt;- read_excel(\"data/taxratesbyclass.xlsx\") %&gt;% \n  rename_with(tolower) %&gt;% \n  rename_with(~str_replace_all(., \" \", \"_\")) |&gt; \n  mutate(across(c(dor_code, fiscal_year), ~as.numeric(.))) %&gt;% \n  filter(municipality!=\"Devens\")\n\n\n\n\nshow code\nlibrary(sf)\ngeojson_data &lt;- read_sf(\"data/ma_municipalities.geojson\")\n\nmerged_df &lt;- tax_prop |&gt; \n  left_join(geojson_data, \n            join_by(dor_code==TOWN_ID))\n\n\nmap_df &lt;- merged_df %&gt;%\n  filter(fiscal_year == 2025, \n         !is.na(residential))\n\n# Step 2: Convert to sf object if not already\nmap_sf &lt;- st_as_sf(map_df)\n\n# Step 3: Plot with plotly\nfig &lt;- \n  plot_ly(\n    map_sf,\n    split = ~municipality,\n    color = ~residential,            # Color polygons by the numeric residential value\n    showlegend = FALSE,\n    stroke = I(\"white\"),             # Sets the border color\n    span = I(0.3),                   # Sets the border width\n    text = ~paste0(                  # Defines the custom hover text\n      \"&lt;b&gt;\", municipality, \"&lt;/b&gt;&lt;br&gt;\",\n      \"Residential Tax Rate: \", round(residential, 2)\n    ),\n    hoverinfo = \"text\",\n    hoveron = \"fills\"\n  ) %&gt;%\n  hide_colorbar() %&gt;%                # Add this line to remove the color scale legend\n  layout(\n    title = \"2025 Residential Property Tax Rates by Municipality&lt;br&gt;Per $1,000 in Assessed Value\",\n    geo = list(visible = FALSE)\n  )\n\nfig\n\n\n\n\n\n\n\n\nshow code\nshared_df &lt;- SharedData$new(tax_prop, key = ~municipality)\n\ngg_rates &lt;- ggplot(shared_df, aes(x = fiscal_year, y = residential, color = municipality, group = municipality)) +\n  geom_line(linewidth = 1) + # No need to set color here\n  geom_point(size = 2.5) +   # No need to set color here\n  labs(\n    title = \"Residential Property Tax Rates Over Time\",\n    x = \"Year\",\n    y = \"Rate per $1,000 Assessed Value\",\n    color = \"Municipality\" # Sets the legend title\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(legend.position = \"none\") # Hide the ggplot legend\n\nbscols(\n  widths = c(3, 9), # Define column widths (3 + 9 = 12)\n  filter_select(\n    id = \"municipality_filter\",\n    label = \"Select Municipality/ies:\",\n    sharedData = shared_df,\n    group = ~municipality,\n    multiple = TRUE,\n    all = FALSE\n  ), \n  ggplotly(gg_rates, tooltip = c(\"year\", \"y\", \"municipality\")) %&gt;%\n    layout(legend = list(title = list(text = '&lt;b&gt;Municipality&lt;/b&gt;'))))\n\n\n\n\n\n\nSelect Municipality/ies:"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "interests",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  }
]